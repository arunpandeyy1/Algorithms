import java.util.Scanner;
public class Binary_Search
{
    //returns leftmost-index of element x from array a[]
    public static int Binary_Search(int n,int a[],int x)
    {
        int low = 0;
        int high = n-1;
        int ans = -1;
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(a[mid]<x)
            {
                low = mid+1;
            }
            else if(a[mid]>x)
            {
                high = mid-1;
            }
            else
            {
                ans = mid;
                high = mid-1;
            }
            
        }
        return ans;
    }
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        //n = number of elements in array
        //a[] = array containing elements
        int n = sc.nextInt();
        int a[] = new int[n];
        for(int i=0;i<n;i++)
        {
            a[i] = sc.nextInt();
        }
        //x = element to be searched
        int x = sc.nextInt();
        //By using Binary Searching technique : This technique needs sorted array
        //Time complexity : O(n/2)
        if(Binary_Search(n, a, x)==-1)
        {
            System.out.println("Element Not Found!!");
        }
        else
        {
            System.out.println("Element is found at "+(Binary_Search(n, a, x)+1));
        }
    }
}
