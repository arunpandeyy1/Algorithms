class Solution {
    public boolean isSafe(int row,int col,char board[][],int n)
    {
        int duprow = row;
        int dupcol = col;
        while(row>=0&&col>=0)
        {
            if(board[row][col]=='Q') return false;
            row--;col--;
        }
        row = duprow;col = dupcol;
        while(col>=0)
        {
            if(board[row][col]=='Q') return false;
            col--;
        }
        row = duprow;col = dupcol;
        while(row<n&&col>=0)
        {
            if(board[row][col]=='Q') return false;
            row++;col--;
        }
        return true;
    }
    public List<List<String>> solveNQueens(int n) 
    {
        char board[][] = new char[n][n];
        List<List<String>> ans = new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                board[i][j] = '.';
            }
        }
        solve(0,board,ans,n);
        return ans;
    }
    public void solve(int col,char board[][],List<List<String>> ans,int n)
    {
        if(col==n)
        {
            List<String> temp = new ArrayList<>();
            for(int i=0;i<n;i++)
            {
                String s="";
                for(int j=0;j<n;j++)
                {
                    s+=board[i][j];
                }
                temp.add(s);
            }
            ans.add(temp);
            return;
        }
        for(int row=0;row<n;row++)
        {
            if(isSafe(row,col,board,n))
            {
                board[row][col] = 'Q';
                solve(col+1,board,ans,n);
                board[row][col] = '.';
            }
        }
    }
}
